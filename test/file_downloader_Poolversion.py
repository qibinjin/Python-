from multiprocessing import Pool, Managerimport os, random, timedef copy_file(queue, file_name, source_folder_name, dest_folder_name):    f_read = open(source_folder_name + '/' + file_name, 'rb')    f_write = open(dest_folder_name + '/' + file_name, 'wb')    while True:        time.sleep(random.random())        content = f_read.read(1024)        if content:            f_write.write(content)        else:            break    f_read.close()    f_write.close()    queue.put(file_name)def main():    source_folder_name = input('please input folder name')    dest_folder_name = source_folder_name + '[copy]'    try:        os.mkdir(dest_folder_name)    except FileExistsError:        pass    file_names = os.listdir(source_folder_name)    queue = Manager().Queue()    pool = Pool(3)    for file_name in file_names:        pool.apply_async(copy_file, args=(queue, file_name, source_folder_name, dest_folder_name))    pool.close()    all_file_num = len(file_names)    while True:        file_name = queue.get()        if file_name in file_names:            file_names.remove(file_name)        copy_rate = (all_file_num - len(file_names)) * 100 / all_file_num        print('%.2f%%...(%s)' % (copy_rate, file_name) + ' ' * 50, end='')        if copy_rate >= 100:            break        print()if __name__ == '__main__':    main()